<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AD.Questionnaires</name>
    </assembly>
    <members>
        <member name="T:AD.Questionnaires.TryConvertDocToDocxExtensions">
            <summary>
            Provides methods to convert Microsoft Word 97 - 2003 documents (.doc) into Microsoft Word documents (.docx).
            </summary>
        </member>
        <member name="M:AD.Questionnaires.TryConvertDocToDocxExtensions.TryConvertDocToDocx(AD.IO.DirectoryPath)">
            <summary>
            Converts any .doc files to .docx files, then returns all .docx files from the directory including newly created files.
            </summary>
            <param name="directoryPath">The directory of files to try to convert.</param>
            <returns>An enumerable collections of .docx files in the directory. This includes any newly created files.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.AggregateException"/>
        </member>
        <member name="M:AD.Questionnaires.TryConvertDocToDocxExtensions.TryConvertDocToDocx(System.Collections.Generic.IEnumerable{AD.IO.FilePath})">
            <summary>
            Converts any .doc files to .docx files, then returns all .docx files from the enumerable including newly created files.
            </summary>
            <param name="filePaths">The file paths to convert.</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.Questionnaires.TryConvertDocToDocxExtensions.TryConvertDocToDocx(System.Linq.ParallelQuery{AD.IO.FilePath})">
            <summary>
            Converts any .doc files to .docx files, then returns all .docx files from the enumerable including newly created files.
            </summary>
            <param name="filePaths">The file paths to convert.</param>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.AggregateException"/>
        </member>
        <member name="M:AD.Questionnaires.TryConvertDocToDocxExtensions.TryConvertDocToDocx(AD.IO.FilePath)">
            <summary>
            Attempts to convert the file from .doc format to .docx format.
            </summary>
            <param name="filePath">The file path to convert.</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="T:AD.Questionnaires.CreateXmlFromOpenXmlExtensions">
            <summary>
            Provides methods to open a Microsoft Word document as an XElement.
            </summary>
        </member>
        <member name="F:AD.Questionnaires.CreateXmlFromOpenXmlExtensions.OpenXmlNamespace">
            <summary>
            Represents the 'w:' prefix seen in raw OpenXML documents. This constant is needed to extract attributes.
            </summary>
        </member>
        <member name="M:AD.Questionnaires.CreateXmlFromOpenXmlExtensions.CreateXmlFromOpenXml(System.Xml.Linq.XElement)">
            <summary>
            Transform OpenXML into simplified XML. This includes removing namespaces and most attributes.
            This method traverses the XML in a tail-recursive manner. Do not call this method on any element other than the root element.
            </summary>
            <param name="element">The root element of the XML object being transformed.</param>
            <returns>An XElement cleaned of namespaces and attributes.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Questionnaires.CreateXmlFromOpenXmlExtensions.CreateXmlFromOpenXml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Transform OpenXML into simplified XML. This includes removing namespaces and most attributes.
            This method traverses the XML in a tail-recursive manner. Do not call this method on any element other than the root element.
            </summary>
            <param name="elements">The root elements of the XML objects being transformed.</param>
            <returns>An XElement cleaned of namespaces and attributes.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Questionnaires.CreateXmlFromOpenXmlExtensions.CreateXmlFromOpenXml(System.Linq.ParallelQuery{System.Xml.Linq.XElement})">
            <summary>
            Transform OpenXML into simplified XML. This includes removing namespaces and most attributes.
            This method traverses the XML in a tail-recursive manner. Do not call this method on any element other than the root element.
            </summary>
            <param name="elements">The root elements of the XML objects being transformed.</param>
            <returns>An XElement cleaned of namespaces and attributes.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="T:AD.Questionnaires.ExtractContentControlsExtensions">
            <summary>
            Extension methods to extract content control data from XML.
            </summary>
        </member>
        <member name="M:AD.Questionnaires.ExtractContentControlsExtensions.ExtractContentControls(System.Xml.Linq.XElement)">
            <summary>
            Extracts content control data from a single XElement representing the document root of a Microsoft Word document.
            </summary>
            <param name="document">The document root element of a Microsoft Word document.</param>
            <returns>An XElement whose root is a questionnaire element.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.Questionnaires.ExtractContentControlsExtensions.ExtractContentControls(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Extracts content control data from an enumerable of simplified XElements representing the document root of a Microsoft Word document.
            </summary>
            <param name="documents">XElements that have been simplified for processing. Each XElement in the enumerable should be a document root.</param>
            <returns>An enumerable collection of XElements where the root-level element is a questionnaire.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.Questionnaires.ExtractContentControlsExtensions.ExtractContentControls(System.Linq.ParallelQuery{System.Xml.Linq.XElement})">
            <summary>
            Extracts content control data from an enumerable of simplified XElements representing the document root of a Microsoft Word document.
            </summary>
            <param name="documents">XElements that have been simplified for processing. Each XElement in the enumerable should be a document root.</param>
            <returns>An enumerable collection of XElements where the root-level element is a questionnaire.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="T:AD.Questionnaires.ExtractFormFieldsExtensions">
            <summary>
            Extension methods to extract form field data from XML.
            </summary>
        </member>
        <member name="M:AD.Questionnaires.ExtractFormFieldsExtensions.ExtractFormFields(System.Xml.Linq.XElement)">
            <summary>
            Extracts form field data from a single XElement representing the document root of a Microsoft Word document.
            </summary>
            <param name="document">The document root element of a Microsoft Word document.</param>
            <returns>An XElement whose root is a questionnaire element.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Questionnaires.ExtractFormFieldsExtensions.ExtractFormFields(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Extracts form field data from an enumerable of simplified XElements representing the document root of a Microsoft Word document.
            </summary>
            <param name="documents">XElements that have been simplified for processing. Each XElement in the enumerable should be a document root.</param>
            <returns>An enumerable collection of XElements where the root-level element is a questionnaire.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Questionnaires.ExtractFormFieldsExtensions.ExtractFormFields(System.Linq.ParallelQuery{System.Xml.Linq.XElement})">
            <summary>
            Extracts form field data from an enumerable of simplified XElements representing the document root of a Microsoft Word document.
            </summary>
            <param name="documents">XElements that have been simplified for processing. Each XElement in the enumerable should be a document root.</param>
            <returns>An enumerable collection of XElements where the root-level element is a questionnaire.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:AD.Questionnaires.QuestionnaireFactory">
            <summary>
            Factory class providing a simple entry point for the AD.Questionnaire library.
            </summary>
        </member>
        <member name="M:AD.Questionnaires.QuestionnaireFactory.ProcessContentControls(AD.IO.DirectoryPath)">
            <summary>
            Extracts content control data from each .doc and .docx file in the directory and writes the content control data into the directory.
            </summary>
            <param name="directoryPath">The directory to search for .doc and .docx files.</param>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.Questionnaires.QuestionnaireFactory.ProcessFormFields(AD.IO.DirectoryPath)">
            <summary>
            Extracts form field data from each .doc and .docx file in the directory and writes the form field data into the directory.
            </summary>
            <param name="directoryPath">The directory to search for .doc and .docx files.</param>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.Questionnaires.QuestionnaireFactory.ProcessContentControls(System.Collections.Generic.IEnumerable{AD.IO.DocxFilePath},AD.IO.DirectoryPath)">
            <summary>
            Extracts content control data from each file and writes to the specified directory.
            </summary>
            <param name="files">The files from which content control data are extracted.</param>
            <param name="directoryPath">The directory to which form field data are written.</param>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.Questionnaires.QuestionnaireFactory.ProcessFormFields(System.Collections.Generic.IEnumerable{AD.IO.DocxFilePath},AD.IO.DirectoryPath)">
            <summary>
            Extracts form field data from each file and writes to the specified directory.
            </summary>
            <param name="files">The files from which form field data are extracted.</param>
            <param name="directoryPath">The directory to which form field data are written.</param>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
    </members>
</doc>
